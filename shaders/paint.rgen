#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable

#include "raycommon.glsl"

layout(binding = 0, set = 0) uniform Camera {
    mat4 model;
    mat4 view;
    mat4 proj;
    mat4 viewInv;
    mat4 projInv;
} cam;

layout(binding = 0, set = 1) uniform accelerationStructureEXT topLevelAS;
layout(binding = 1, set = 1, rgba32f) uniform image2D image;

layout(set = 2, binding = 1) uniform Brush {
    float x;
    float y;
    float r;
    int   mode;
} brush;

layout(location = 0) rayPayloadEXT hitPayload prd;

void main() 
{
    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
    const vec2 inUV = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
    vec2 d = inUV * 2.0 - 1.0; //normalize to -1, 1 range

    vec4 origin = cam.viewInv * vec4(d.x, d.y, 0, 1);
    vec4 target = cam.projInv * vec4(0, 0, 1, 1);
    vec4 dir    = cam.viewInv * vec4(normalize(target.xyz), 0);

    uint  rayFlags = gl_RayFlagsOpaqueEXT;
    float tMin     = 0.001;
    float tMax     = 10000.0;

    traceRayEXT(topLevelAS,     // acceleration structure
            rayFlags,       // rayFlags
            0xFF,           // cullMask
            0,              // sbtRecordOffset
            0,              // sbtRecordStride
            0,              // missIndex
            origin.xyz,     // ray origin
            tMin,           // ray min range
            dir.xyz,  // ray direction
            tMax,           // ray max range
            0               // payload (location = 0)
    );

    //imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(0.2, 0.6, 0.8, 1.0));
    //imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(prd.hitValue, 1.0));
    vec2 uv = gl_LaunchIDEXT.xy / 1000.0f;
    vec2 brushPos = vec2(brush.x, brush.y);
    float dist = distance(uv, brushPos);
    vec4 color = vec4(1, 1, 1, 1);
    if (dist < brush.r)
        color.rgb *= 1.0;
    else
        color.rgb *= 0.0;
    vec4 colorOrig = imageLoad(image, ivec2(gl_LaunchIDEXT));
    color = max(color, colorOrig);
    imageStore(image, ivec2(gl_LaunchIDEXT.xy), color);
}
