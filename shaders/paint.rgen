#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable

#include "raycommon.glsl"
#include "common.glsl"

layout(binding = 0, set = 0) uniform Camera {
    mat4 model;
    mat4 view;
    mat4 proj;
    mat4 viewInv;
    mat4 projInv;
} cam;

layout(binding = 0, set = 1) uniform accelerationStructureEXT topLevelAS;
layout(binding = 1, set = 1, rgba32f) uniform image2D image;

layout(set = 2, binding = 1) uniform Brush {
    float x;
    float y;
    float radius;
    float r;
    float g;
    float b;
    int   mode;
} brush;

layout(location = 0) rayPayloadEXT hitPayload prd;

void main() 
{
    if (brush.mode > 0) // not painting
        return;
    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
    const vec2 inUV = pixelCenter / vec2(gl_LaunchSizeEXT.xy); // map to 0 to 1
    vec2 brushPos = vec2(brush.x, brush.y);
    brushPos = brushPos * 2.0 - 1.0;
    vec2 d = inUV * 2.0 - 1.0; //normalize to -1, 1 range
    d = d * brush.radius * 2.0; // map to -r to r
    const float dist = length(d);
    if (dist > brush.radius * 2.0)
        return;
    d += brushPos;

    vec4 origin = cam.viewInv * vec4(0, 0, 0, 1);
    vec4 target = cam.projInv * vec4(d.x, d.y, 1, 1);
    vec4 dir    = cam.viewInv * vec4(normalize(target.xyz), 0);

    uint  rayFlags = gl_RayFlagsOpaqueEXT;
    float tMin     = 0.001;
    float tMax     = 10000.0;

    traceRayEXT(topLevelAS,     // acceleration structure
            rayFlags,       // rayFlags
            0xFF,           // cullMask
            0,              // sbtRecordOffset
            0,              // sbtRecordStride
            0,              // missIndex
            origin.xyz,     // ray origin
            tMin,           // ray min range
            dir.xyz,  // ray direction
            tMax,           // ray max range
            0               // payload (location = 0)
    );

    //vec4 color = vec4(brush.color[0], brush.color[1], brush.color[2], 1.0);
    //vec4 color = vec4(brush.col, 1.0);
    const float pressure = 1.0 - (dist / (brush.radius * 2.0));
    const float value = smoothstep(0.0, 0.6, pressure);
    vec4 color = vec4(brush.r * value, brush.g * value, brush.b * value, value);

    ivec2 texel = ivec2(prd.hitUv * vec2(imageSize(image)));
    vec4 colorOrig = imageLoad(image, texel);
    color = over(color, colorOrig);
    imageStore(image, texel, color);
}
