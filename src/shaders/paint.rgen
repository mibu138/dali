#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable

#include "raycommon.glsl"
#include "common.glsl"
#include "brush.glsl"

layout(set = 0, binding = 2) uniform accelerationStructureEXT topLevelAS;

layout(set = 1, binding = 0) uniform Camera {
    mat4 model;
    mat4 view;
    mat4 proj;
    mat4 viewInv;
    mat4 projInv;
} cam;

layout(set = 1, binding = 1) uniform Block {
    Brush brush;
};

layout(set = 1, binding = 2, r32f) uniform image2D image;

layout(location = 0) rayPayloadEXT hitPayload prd;

layout(push_constant) uniform PC {
    float seedx;
    float seedy;
    float brushx;
    float brushy;
} pc;

float rand(vec2 co){
    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453) - 0.5;
}

void fireRay(mat4 viewInv, mat4 projInv, vec2 st /*screen space ray origin*/)
{
    vec4 origin = cam.viewInv * vec4(0, 0, 0, 1);
    vec4 target = cam.projInv * vec4(st.x, st.y, 1, 1);
    vec4 dir    = cam.viewInv * vec4(normalize(target.xyz), 0);

    uint  rayFlags = gl_RayFlagsOpaqueEXT;
    float tMin     = 0.001;
    float tMax     = 10000.0;

    traceRayEXT(topLevelAS, // acceleration structure
            rayFlags,       // rayFlags
            0xFF,           // cullMask
            0,              // sbtRecordOffset
            0,              // sbtRecordStride
            0,              // missIndex
            origin.xyz,     // ray origin
            tMin,           // ray min range
            dir.xyz,        // ray direction
            tMax,           // ray max range
            0               // payload (location = 0)
    );
}

void main() 
{
    const vec2 jitter = vec2(rand(gl_LaunchIDEXT.xy * pc.seedx), rand(gl_LaunchIDEXT.xy * pc.seedy * 41.45234));
    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5) + jitter;
    const vec2 inUV = pixelCenter / vec2(gl_LaunchSizeEXT.xy); // map to 0 to 1
    vec2 brushPos = vec2(pc.brushx, pc.brushy) * 2.0 - 1.0; // map to -1, 1 range
    vec2 st = inUV * 2.0 - 1.0; //normalize to -1, 1 range
    st = st * brush.radius;
    const float dist = length(st);
    st = st + brushPos; 

    fireRay(cam.viewInv, cam.projInv, st);

    const float f = brush.anti_falloff;
    float alpha = 1.0 - smoothstep(f, brush.radius, dist);
    alpha *= brush.opacity;
    //vec4 color = vec4(brush.r, brush.g, brush.b, alpha);
    vec4 color = vec4(alpha, 0, 0, 0); //spec states R component is used for r32f format images

    ivec2 texel = ivec2(prd.hitUv * vec2(imageSize(image)));

    imageStore(image, texel, color);
}
